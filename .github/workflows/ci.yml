name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      neo4j:
        image: neo4j:5.0
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
          - 7474:7474
        options: --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'" --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: test_knowledge_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live" --health-interval 30s --health-timeout 20s --health-retries 3 --entrypoint "minio server /data --console-address :9001"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libpq-dev \
          libssl-dev \
          libffi-dev \
          python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Wait for services
      run: |
        # Wait for Neo4j
        timeout 60 bash -c 'until cypher-shell -a bolt://localhost:7687 -u neo4j -p testpassword "RETURN 1"; do sleep 2; done'
        
        # Wait for Redis
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 2; done'
        
        # Wait for PostgreSQL
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do sleep 2; done'
        
        # Wait for MinIO
        timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'

    - name: Set up test environment
      run: |
        export NEO4J_URL=bolt://localhost:7687
        export NEO4J_USER=neo4j
        export NEO4J_PASSWORD=testpassword
        export REDIS_URL=redis://localhost:6379
        export DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/test_knowledge_db
        export MINIO_ENDPOINT=localhost:9000
        export MINIO_ACCESS_KEY=minioadmin
        export MINIO_SECRET_KEY=minioadmin
        export APP_ENV=test

    - name: Run linting
      run: |
        # Code formatting check
        black --check backend/
        
        # Import sorting check
        isort --check-only backend/
        
        # Linting
        flake8 backend/
        
        # Type checking
        mypy backend/

    - name: Run security checks
      run: |
        # Security vulnerability scanning
        bandit -r backend/ -f json -o bandit-report.json
        
        # Dependency vulnerability scanning
        safety check --json --output safety-report.json

    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=backend \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=pytest-unit.xml \
          -v

    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --junitxml=pytest-integration.xml \
          -v
      env:
        NEO4J_URL: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/test_knowledge_db
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin

    - name: Run performance tests
      run: |
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark.json \
          -v

    - name: Generate test report
      if: always()
      run: |
        # Generate combined test report
        pytest-html-merger \
          --input pytest-unit.xml pytest-integration.xml \
          --output test-report.html

    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          pytest-*.xml
          coverage.xml
          htmlcov/
          test-report.html
          bandit-report.json
          safety-report.json
          benchmark.json

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ vars.DOCKER_USERNAME || 'erag-project' }}/knowledge-system
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ vars.DOCKER_USERNAME || 'erag-project' }}/knowledge-system:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/staging/
        # 或者：ansible-playbook deploy-staging.yml

    - name: Run smoke tests
      run: |
        # 运行冒烟测试
        pytest tests/smoke/ --base-url=${{ vars.STAGING_URL || 'https://staging.erag.example.com' }}

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          Staging deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 生产部署脚本
        # 包括蓝绿部署、金丝雀部署等策略

    - name: Run health checks
      run: |
        # 健康检查
        curl -f ${{ vars.PRODUCTION_URL || 'https://erag.example.com' }}/health

    - name: Run post-deployment tests
      run: |
        pytest tests/e2e/ --base-url=${{ vars.PRODUCTION_URL || 'https://erag.example.com' }}

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          Production deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}

  monitoring:
    if: github.ref == 'refs/heads/main'
    needs: deploy-production
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup monitoring alerts
      run: |
        # 设置监控告警
        echo "Setting up monitoring and alerts..."

    - name: Performance baseline
      run: |
        # 建立性能基线
        echo "Establishing performance baseline..."

    - name: Update documentation
      run: |
        # 更新部署文档
        echo "Updating deployment documentation..." 